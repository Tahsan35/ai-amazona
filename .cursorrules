# Cursor Rules

## Instructions

- Record fixes for mistakes or corrections to avoid repetition in the `Lessons` section.
- Organize thoughts and plan steps before starting a task in the `Scratchpad` section.
- Clear old tasks if necessary.
- Use todo markers for progress tracking:
  - `[X]` Completed tasks
  - `[ ]` Pending tasks
- Update Scratchpad after completing subtasks.
- Reflect and plan after milestones for better task management.
- Always refer to Scratchpad before planning the next step.

## Lessons

1. Use `npx shadcn@latest add [component]` instead of `npx shadcn-ui@latest add [component]` when installing Shadcn UI components.
2. In Next.js 14+, page props params must be typed as a Promise. Example:
   ```typescript
   type tParams = Promise<{ id: string }>
   interface PageProps {
     params: tParams
   }
   ```
   Then await the params in the component:
   ```typescript
   export default async function Page(props: PageProps) {
     const { id } = await props.params
   }
   ```
3. Use `const session = await auth()` instead of `const session = await getServerSession(authOptions)` for Next.js authentication. The new `auth()` function is the recommended way to get the session in Next.js Auth v5.
4. When importing `useRouter` from 'next/navigation', the component must be marked as a client component using the `'use client'` directive at the top of the file, as this hook only works on the client side.

## Scratchpad

### 1. Project Setup and Configuration [X]

- [x] Initialize Next.js 15 project with TypeScript
- [x] Set up project structure and folders
- [x] Configure ESLint and Prettier
- [x] Install and configure dependencies:
  - Shadcn UI components
  - Lucide icons
  - Zod for validation
  - Zustand for state management
  - Recharts for analytics
  - Resend for emails
  - Uploadthing for file uploads
  - Prisma ORM
  - PostgreSQL database
  - NextAuth.js beta for authentication
  - Stripe for payments

### 2. Database and Authentication [X]

- [x] Set up PostgreSQL database
- [x] Configure Prisma schema:
  - User model
  - Product model
  - Category model
  - Order model
  - Review model
  - Cart model
- [x] Implement NextAuth.js authentication:
  - Email/Password
  - OAuth providers (Google, GitHub)
  - JWT handling
  - Protected routes

### 3. Core Features - Customer Side [ ]

- [x] Home Layout:
  - Create `(home)` folder in `app` directory
  - Header with logo, search bar, and navigation
  - Footer with links and social media
- [x] Homepage:
  - banner carousel
  - latest products
- [x] Products Catalog:
  - Sidebar with categories and filters
  - Search results
  - Product grid
  - Pagination
- [x] Product pages:
  - Create product detail page layout
  - Implement image gallery with thumbnails
  - Add product information section:
    - Title, price, description
    - Stock status
    - Add to cart button
  - Reviews and ratings section:
    - Display existing reviews
    - Add review form for authenticated users
    - Star rating component
  - Related products section:
    - Show products from same category
    - Product card carousel
- [x] Shopping cart:
  - Add/remove items
  - Update quantities
  - Cart persistence
- [x] Checkout process:
  - Shipping information
  - Payment integration (Stripe)
  - Order confirmation
- [x] User dashboard:
  - Order history
  - Profile management
  - Saved addresses
  - Wishlist

### 4. Admin Dashboard [ ]

- [x] Admin authentication and authorization
- [ ] Dashboard overview:
  - [x] Layout and Structure:
    - [x] Create admin dashboard layout with sidebar navigation
    - [x] Implement responsive grid for dashboard widgets
    - [x] Add loading states and error boundaries
  - [x] Key Metrics Cards:
    - [x] Total revenue widget with real data
    - [x] Total orders widget with real data
    - [x] Total customers widget with real data
    - [x] Average order value widget with real data
  - [x] Sales Analytics:
    - [x] Revenue Chart:
      - [x] Implement line chart using Recharts
      - [x] Add daily/weekly/monthly/yearly filters
      - [x] Show revenue trends over time
      - [x] Add tooltip with detailed information
    - [x] Order Statistics:
      - [x] Bar chart for order volume
      - [x] Order status distribution
      - [x] Peak ordering times
  - [x] Recent Orders Table:
    - [x] Implement data table with columns:
      - [x] Order ID
      - [x] Customer name
      - [x] Order total
      - [x] Status
      - [x] Date
    - [x] Add sorting and filtering
    - [x] Quick actions (view, process, update status)
  - [ ] Low Stock Alerts:
    - [ ] Create inventory threshold settings in admin settings
    - [ ] Implement database queries to identify low stock products
    - [ ] Design alert cards with color-coded indicators
    - [ ] Add quick restock action buttons with quantity input
    - [ ] Set up notification system for critical stock levels
  - [ ] Top Products:
    - [ ] Implement analytics queries for best-selling products
    - [ ] Create sortable data table with product performance metrics
    - [ ] Design revenue by product chart using Recharts
    - [ ] Add stock status indicators with visual cues
    - [ ] Implement filtering by time period and category
  - [ ] Customer Insights:
    - [ ] Create customer segmentation logic (new vs returning)
    - [ ] Implement customer acquisition chart with Recharts
    - [ ] Design top customers table with revenue metrics
    - [ ] Add customer lifetime value calculations
    - [ ] Create customer behavior analysis dashboard
  - [ ] Real-time Updates:
    - [ ] Set up WebSocket connection using Socket.io
    - [ ] Implement real-time order notification system
    - [ ] Create toast notifications for new orders
    - [ ] Add live stock level update indicators
    - [ ] Implement admin activity log with real-time updates
  - [ ] Export and Reports:
    - [ ] Create CSV/PDF export functionality for all data tables
    - [ ] Implement custom date range picker component
    - [ ] Design report templates for sales, inventory, and customers
    - [ ] Add scheduled report generation functionality
    - [ ] Implement email delivery of reports using Resend
- [ ] Product management:
  - [ ] Create product CRUD operations:
    - [ ] Product creation form with validation using Zod
    - [ ] Product edit interface with image preview
    - [ ] Product deletion with confirmation dialog
    - [ ] Product duplication functionality
  - [ ] Implement bulk actions:
    - [ ] Multi-select functionality for products
    - [ ] Bulk status update (publish/unpublish)
    - [ ] Bulk category assignment
    - [ ] Bulk pricing updates
    - [ ] Bulk deletion with safeguards
  - [ ] Set up image upload with Uploadthing:
    - [ ] Configure Uploadthing for product images
    - [ ] Implement image cropping and resizing
    - [ ] Create drag-and-drop image upload zone
    - [ ] Add image gallery management
    - [ ] Implement image optimization pipeline
  - [ ] Add product variants and attributes:
    - [ ] Create variant management interface
    - [ ] Implement attribute system (size, color, etc.)
    - [ ] Add SKU and inventory tracking per variant
    - [ ] Create variant pricing rules

- [ ] Order management:
  - [ ] Implement order processing workflow:
    - [ ] Create order detail view with customer information
    - [ ] Implement order fulfillment process
    - [ ] Add order notes and history tracking
    - [ ] Create packing slip and invoice generation
  - [ ] Build status update system:
    - [ ] Create order status workflow (pending, processing, shipped, etc.)
    - [ ] Implement status change notifications
    - [ ] Add status update history
    - [ ] Create automated status updates based on events
  - [ ] Develop refund handling:
    - [ ] Create refund request processing interface
    - [ ] Implement partial and full refund options
    - [ ] Add refund reason tracking
    - [ ] Integrate with Stripe for refund processing
    - [ ] Implement return merchandise authorization (RMA) system

- [ ] User management:
  - [ ] Create customer management:
    - [ ] Implement customer list with filtering and search
    - [ ] Create customer detail view with order history
    - [ ] Add customer notes and tags functionality
    - [ ] Implement customer account status controls
  - [ ] Build admin privileges system:
    - [ ] Create role-based access control (RBAC)
    - [ ] Implement permission management interface
    - [ ] Add admin activity logging
    - [ ] Create admin invitation system
  - [ ] Develop user actions:
    - [ ] Implement impersonation for customer support
    - [ ] Add manual order creation for customers
    - [ ] Create customer communication tools
    - [ ] Implement customer account merging

### 5. Advanced Features [ ]

- [ ] Real-time notifications:
  - [ ] Set up notification center in admin dashboard
  - [ ] Implement browser notifications for admin users
  - [ ] Create notification preferences settings
  - [ ] Add notification history and management
  - [ ] Implement push notifications for mobile

- [ ] Email system (Resend):
  - [ ] Configure Resend for transactional emails
  - [ ] Create email templates for various events:
    - [ ] Order confirmation emails with order details
    - [ ] Shipping update emails with tracking information
    - [ ] Password reset emails with secure tokens
    - [ ] Abandoned cart reminder emails
    - [ ] Product back-in-stock notifications
  - [ ] Implement email preview and testing tools
  - [ ] Add email delivery tracking and analytics

- [ ] Search optimization:
  - [ ] Implement advanced product search with filters
  - [ ] Add autocomplete suggestions
  - [ ] Create search analytics to track popular terms
  - [ ] Implement search result ranking algorithm
  - [ ] Add natural language processing for search queries

- [ ] Performance optimization:
  - [ ] Image optimization:
    - [ ] Implement responsive images with srcset
    - [ ] Set up image CDN integration
    - [ ] Add lazy loading for images
    - [ ] Implement WebP format conversion
  - [ ] Caching strategies:
    - [ ] Configure Redis for server-side caching
    - [ ] Implement browser caching headers
    - [ ] Add API response caching
    - [ ] Create cache invalidation system
  - [ ] API optimization:
    - [ ] Implement pagination and cursor-based pagination
    - [ ] Add field selection to reduce payload size
    - [ ] Create batched API requests
    - [ ] Implement rate limiting

- [ ] Analytics and reporting:
  - [ ] Set up comprehensive analytics dashboard
  - [ ] Implement custom report builder
  - [ ] Create scheduled report delivery
  - [ ] Add data export in multiple formats
  - [ ] Implement conversion tracking and funnel analysis

### 6. Testing and Deployment [ ]

- [ ] Unit testing:
  - [ ] Set up Jest for component testing
  - [ ] Create unit tests for utility functions
  - [ ] Implement API endpoint unit tests
  - [ ] Add validation logic tests
  - [ ] Create mock services for isolated testing

- [ ] Integration testing:
  - [ ] Set up integration test environment
  - [ ] Create API integration tests
  - [ ] Implement database integration tests
  - [ ] Add authentication flow tests
  - [ ] Create payment processing integration tests

- [ ] E2E testing:
  - [ ] Configure Playwright or Cypress for E2E tests
  - [ ] Create user journey tests (registration, checkout, etc.)
  - [ ] Implement admin dashboard E2E tests
  - [ ] Add visual regression testing
  - [ ] Create performance benchmark tests

- [ ] Security audit:
  - [ ] Implement CSRF protection
  - [ ] Add rate limiting for authentication attempts
  - [ ] Create input validation for all forms
  - [ ] Implement proper error handling
  - [ ] Add security headers (CSP, HSTS, etc.)
  - [ ] Conduct vulnerability scanning

- [ ] Production deployment:
  - [ ] Environment setup:
    - [ ] Configure production environment variables
    - [ ] Set up database backups
    - [ ] Implement logging and monitoring
    - [ ] Configure SSL certificates
  - [ ] CI/CD pipeline:
    - [ ] Set up GitHub Actions or similar CI/CD tool
    - [ ] Create build and test automation
    - [ ] Implement deployment automation
    - [ ] Add rollback mechanisms
  - [ ] Monitoring:
    - [ ] Set up application performance monitoring
    - [ ] Implement error tracking and alerting
    - [ ] Create uptime monitoring
    - [ ] Add database performance monitoring
  - [ ] Backup strategy:
    - [ ] Configure automated database backups
    - [ ] Implement file storage backups
    - [ ] Create disaster recovery plan
    - [ ] Test backup restoration process

### 7. Documentation [ ]

- [ ] API documentation:
  - [ ] Create OpenAPI/Swagger documentation
  - [ ] Document authentication methods
  - [ ] Add request/response examples
  - [ ] Create API versioning strategy
  - [ ] Document rate limiting and usage guidelines

- [ ] User guide:
  - [ ] Create customer-facing documentation
  - [ ] Add product browsing and purchasing guides
  - [ ] Create account management instructions
  - [ ] Add order tracking and history guide
  - [ ] Create FAQ section

- [ ] Admin documentation:
  - [ ] Create admin dashboard user manual
  - [ ] Document product management workflows
  - [ ] Add order processing guidelines
  - [ ] Create reporting and analytics guide
  - [ ] Document user management procedures

- [ ] Deployment guide:
  - [ ] Document environment setup requirements
  - [ ] Create installation instructions
  - [ ] Add configuration guidelines
  - [ ] Document scaling strategies
  - [ ] Create troubleshooting guide
